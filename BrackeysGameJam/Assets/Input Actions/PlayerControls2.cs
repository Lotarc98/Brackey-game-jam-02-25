//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input Actions/PlayerControls2.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls2: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls2()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls2"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""3de1592d-6785-4c9e-a783-0ebefc4ea15b"",
            ""actions"": [
                {
                    ""name"": ""OnMovePlayer2"",
                    ""type"": ""Value"",
                    ""id"": ""dcdb7be0-b7c8-44a1-8111-236eb0a5908a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InteractPlayer2"",
                    ""type"": ""Button"",
                    ""id"": ""963a5a89-05ff-49fa-b872-ffa0e8d9cf2e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RevivePlayer2"",
                    ""type"": ""Button"",
                    ""id"": ""efc4e617-c094-4cdf-a70c-b5ff423017f4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""OnMove"",
                    ""id"": ""6b6314a8-204b-4ad8-a7fc-4dafe0dc99d9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMovePlayer2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cbb32495-ffa7-4c90-9efe-47f2e4679a6f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2672ede6-c759-415b-b4dd-4fd10f000713"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6630f26a-1ef6-40a5-ad32-609517391580"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a915cf08-cbcb-4574-982c-2c5181b7fcd0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b1c66efa-a072-4e83-9150-55d43874044a"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractPlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11b11a68-6592-4f7c-8546-bcfa04aa6e8e"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RevivePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_OnMovePlayer2 = m_Gameplay.FindAction("OnMovePlayer2", throwIfNotFound: true);
        m_Gameplay_InteractPlayer2 = m_Gameplay.FindAction("InteractPlayer2", throwIfNotFound: true);
        m_Gameplay_RevivePlayer2 = m_Gameplay.FindAction("RevivePlayer2", throwIfNotFound: true);
    }

    ~@PlayerControls2()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, PlayerControls2.Gameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_OnMovePlayer2;
    private readonly InputAction m_Gameplay_InteractPlayer2;
    private readonly InputAction m_Gameplay_RevivePlayer2;
    public struct GameplayActions
    {
        private @PlayerControls2 m_Wrapper;
        public GameplayActions(@PlayerControls2 wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnMovePlayer2 => m_Wrapper.m_Gameplay_OnMovePlayer2;
        public InputAction @InteractPlayer2 => m_Wrapper.m_Gameplay_InteractPlayer2;
        public InputAction @RevivePlayer2 => m_Wrapper.m_Gameplay_RevivePlayer2;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @OnMovePlayer2.started += instance.OnOnMovePlayer2;
            @OnMovePlayer2.performed += instance.OnOnMovePlayer2;
            @OnMovePlayer2.canceled += instance.OnOnMovePlayer2;
            @InteractPlayer2.started += instance.OnInteractPlayer2;
            @InteractPlayer2.performed += instance.OnInteractPlayer2;
            @InteractPlayer2.canceled += instance.OnInteractPlayer2;
            @RevivePlayer2.started += instance.OnRevivePlayer2;
            @RevivePlayer2.performed += instance.OnRevivePlayer2;
            @RevivePlayer2.canceled += instance.OnRevivePlayer2;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @OnMovePlayer2.started -= instance.OnOnMovePlayer2;
            @OnMovePlayer2.performed -= instance.OnOnMovePlayer2;
            @OnMovePlayer2.canceled -= instance.OnOnMovePlayer2;
            @InteractPlayer2.started -= instance.OnInteractPlayer2;
            @InteractPlayer2.performed -= instance.OnInteractPlayer2;
            @InteractPlayer2.canceled -= instance.OnInteractPlayer2;
            @RevivePlayer2.started -= instance.OnRevivePlayer2;
            @RevivePlayer2.performed -= instance.OnRevivePlayer2;
            @RevivePlayer2.canceled -= instance.OnRevivePlayer2;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnOnMovePlayer2(InputAction.CallbackContext context);
        void OnInteractPlayer2(InputAction.CallbackContext context);
        void OnRevivePlayer2(InputAction.CallbackContext context);
    }
}
